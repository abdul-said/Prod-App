name: Deploy to ECS

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Clear Terraform cache
        run: |
          rm -rf .terraform
          rm -f .terraform.lock.hcl

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Use the latest stable version

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Terraform Apply
        run: |
          terraform init
          terraform apply -auto-approve
        
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-2  # Replace with your region

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        working-directory: ./app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: production_repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  update-ecs:
    name: Update ECS Task Definition
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      ECR_REPOSITORY: production_repository
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image URI Variable
        run: |
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Debug Image URI
        run: |
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "Final Image URI: $IMAGE_URI"

      - name: Update ECS Task Definition
        run: |
          CONTAINER_DEFINITIONS=$(jq -n \
            --arg image "${{ env.IMAGE_URI }}" \
            '[
              {
                "name": "my-app",
                "image": 058264103887.dkr.ecr.eu-west-2.amazonaws.com$image,
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ]')
          echo "Container Definitions: $CONTAINER_DEFINITIONS"
          aws ecs register-task-definition \
            --family service \
            --container-definitions "$CONTAINER_DEFINITIONS"

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster production_ecs_cluster \
            --service production_ecs_service \
            --task-definition service \
            --force-new-deployment
